# -*- coding: utf-8 -*-
"""Cópia de Tutorial DarknetToColab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y3KRPl4mx9efUs64OQl-b6zsq7QF8cB5
"""

import os
import cv2
import numpy as np
import random
import keras
import matplotlib.pyplot as plt
from keras.preprocessing import image
from keras.applications.imagenet_utils import preprocess_input
from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, Flatten, Activation, Conv2D, MaxPooling2D
from pycocotools.coco import COCO

# Verifica se o COCO dataset já está baixado para evitar downloads desnecessários
if not os.path.exists("annotations"):
    print("Baixando annotations...")
    os.system("wget http://images.cocodataset.org/annotations/annotations_trainval2017.zip")
    os.system("unzip annotations_trainval2017.zip -d annotations && rm annotations_trainval2017.zip")

if not os.path.exists("train2017"):
    print("Baixando train2017...")
    os.system("wget http://images.cocodataset.org/zips/train2017.zip")
    os.system("unzip train2017.zip -d train2017 && rm train2017.zip")

if not os.path.exists("val2017"):
    print("Baixando val2017...")
    os.system("wget http://images.cocodataset.org/zips/val2017.zip")
    os.system("unzip val2017.zip -d val2017 && rm val2017.zip")

# Verifica se os arquivos foram descompactados corretamente
if not os.path.exists("annotations/instances_train2017.json"):
    raise FileNotFoundError("Arquivo de anotações não encontrado!")

if not os.listdir("train2017"):
    raise FileNotFoundError("Pasta train2017 está vazia!")

if not os.listdir("val2017"):
    raise FileNotFoundError("Pasta val2017 está vazia!")

# Remover arquivos ZIP após descompactação
os.system("rm -rf annotations_trainval2017.zip train2017.zip val2017.zip")

# Função para exibir imagens

def imShow(path):
    image = cv2.imread(path)
    height, width = image.shape[:2]
    resized_image = cv2.resize(image, (3 * width, 3 * height), interpolation=cv2.INTER_CUBIC)

    plt.figure(figsize=(10, 5))
    plt.axis("off")
    plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
    plt.show()

# Função para carregar imagens do COCO

def load_coco_images(dataset_dir, annotation_file, num_samples=5):
    coco = COCO(annotation_file)
    cat_ids = coco.getCatIds()
    img_ids = coco.getImgIds(catIds=random.choice(cat_ids))
    img_ids = random.sample(img_ids, num_samples)

    images = []
    for img_id in img_ids:
        img_info = coco.loadImgs(img_id)[0]
        img_path = os.path.join(dataset_dir, img_info['file_name'])
        img = cv2.imread(img_path)
        images.append(img)
        imShow(img_path)

    return images

# Configuração para treinamento do YOLO
!git clone https://github.com/AlexeyAB/darknet.git --depth 1
os.chdir("darknet")
!make

# Baixando pesos pré-treinados
!wget https://pjreddie.com/media/files/yolov3.weights

# Treinando o modelo
!./darknet detector train cfg/coco.data cfg/yolov3.cfg yolov3.weights -dont_show

!./darknet detect cfg/yolov3.cfg yolov3.weights data/person.jpg -dont-show

import glob
import random
import os

# Diretório das imagens de validação
val_images_dir = "val2017"

# Carregar lista de imagens
val_images = glob.glob(f"{val_images_dir}/*.jpg")

# Verificar se há imagens no diretório antes de sortear
if len(val_images) == 0:
    print("Erro: Nenhuma imagem encontrada no diretório val2017. Verifique se o download foi feito corretamente.")
else:
    # Definir número de imagens para teste (máximo do que estiver disponível)
    num_test_images = min(5, len(val_images))  # Evita erro de amostra maior que a população
    test_images = random.sample(val_images, num_test_images)

for img_path in test_images:
        print(f"Testando imagem: {img_path}")

        # Rodar a detecção no Darknet
        os.system(f"./darknet detect cfg/yolov3.cfg yolov3.weights {img_path} -dont-show")

        # Exibir a imagem com os resultados
        imShow("predictions.jpg")

!ls /content/

!./darknet detect cfg/yolov3.cfg yolov3.weights /content/teste.jpg -dont-show

imShow('predictions.jpg')